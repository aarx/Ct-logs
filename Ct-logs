#!/bin/bash

# CertSpotter API key
API_KEY="your_api_key_here"

# Check if the user provided a domain as an argument
if [ -z "$1" ]; then
  echo "Usage: $0 <domain>"
  exit 1
fi

# The domain to check
DOMAIN=$1

# Log start of the process
echo "Starting CertSpotter API query for domain: $DOMAIN"

# Run the curl command to fetch CT logs from CertSpotter and save the output to a file
RESPONSE=$(curl -s -u "$API_KEY:" "https://api.certspotter.com/v1/issuances?domain=$DOMAIN&include_subdomains=true&expand=dns_names")

# Check if the response is empty or contains an error
if [[ -z "$RESPONSE" ]]; then
  echo "Error: No data received. Please check your API key and domain."
  exit 1
fi

# Log successful response
echo "Received response from CertSpotter API. Saving to temporary file..."

# Save the JSON response to a temporary file
echo "$RESPONSE" > response.json
echo "JSON response saved to response.json."

# Python script to extract DNS names, perform lookups, and save to an Excel file
python3 <<EOF
import json
import pandas as pd
import socket

print("Starting Python script execution...")

# Load the JSON response and handle potential errors
with open('response.json', 'r') as file:
    try:
        data = json.loads(file.read())
        print("Successfully loaded JSON data.")
    except json.JSONDecodeError:
        print("Error: Failed to parse JSON response.")
        exit(1)

# Check if the data is a list (CertSpotter API typically returns a list of certificates)
if not isinstance(data, list):
    print("Error: Unexpected JSON format. Expected a list of certificates.")
    print(f"Received data: {type(data)}")
    exit(1)

# Extract all unique DNS names
dns_names = set()
print("Extracting DNS names...")
for cert in data:
    dns_names.update(cert.get('dns_names', []))

# Log how many DNS names were found
print(f"Extracted {len(dns_names)} unique DNS names.")

# Prepare a list to store the results
results = []

# Function to perform DNS lookup and reverse DNS lookup
def lookup_domain(domain):
    try:
        # Get IP addresses
        ip_addresses = socket.gethostbyname_ex(domain)[2]
        reverse_dns = [socket.gethostbyaddr(ip)[0] for ip in ip_addresses]
        print(f"Lookups successful for domain: {domain}")
    except socket.gaierror:
        ip_addresses = ["DNS lookup failed"]
        reverse_dns = ["Reverse DNS lookup failed"]
        print(f"DNS lookup failed for domain: {domain}")
    except socket.herror:
        reverse_dns = ["Reverse DNS lookup failed"]
        print(f"Reverse DNS lookup failed for domain: {domain}")
    
    return ip_addresses, reverse_dns

# Perform lookups for each DNS name and collect results
for dns_name in dns_names:
    print(f"Performing DNS and reverse DNS lookups for: {dns_name}")
    ip_addresses, reverse_dns = lookup_domain(dns_name)
    results.append({
        "DNS Name": dns_name,
        "IP Addresses": ', '.join(ip_addresses),
        "Reverse DNS": ', '.join(reverse_dns)
    })

# Convert the results into a DataFrame
df = pd.DataFrame(results)

# Log saving the Excel file
excel_filename = f"${DOMAIN}_dns_names_with_lookups.xlsx"
df.to_excel(excel_filename, index=False)
print(f"DNS lookups and reverse DNS results saved to {excel_filename}")

EOF

# Clean up the temporary JSON file
rm response.json
echo "Temporary file response.json has been removed."
echo "Script execution complete."
